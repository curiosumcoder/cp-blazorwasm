@page "/product"
@inject IProductService ps
@inject Utility util
@inject StateContainer state
@using Microsoft.AspNetCore.Components.Web.Virtualization

<h3>Product - Index</h3>

<a href="/product/create" class="btn btn-primary">Create</a>

<form @onsubmit="onSearch">
    <div class="form-group">
        <label>Search</label>
        <input class="form-control" @bind="filter" />
    </div>
    <button class="btn btn-primary">Search</button>
</form>

<hr />

@if (products == null)
{
    <p><em>Searching... @filter</em></p>
}
else
{
    <p>Items count: @products.Count</p>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Price</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>

            <Virtualize Items="@products" Context="p">
                <tr>
                    <td>@p.ProductName</td>
                    <td>@p.UnitPrice</td>
                    <td><button @onclick="@(async () => { if (await util.Confirm()) { await onDelete(p.ProductId); } })" class="btn btn-warning">X</button></td>
                    <td><a href="/product/edit/@p.ProductId" class="btn btn-primary">Edit</a></td>
                    <td><a href="/product/details/@p.ProductId" class="btn btn-primary">Details</a></td>
                </tr>
            </Virtualize>

@*            @foreach (var p in products)
            {
                <tr>
                    <td>@p.ProductName</td>
                    <td>@p.UnitPrice</td>
                    <td><button @onclick="@(async () => { if (await util.Confirm()) { await onDelete(p.ProductId); } })" class="btn btn-warning">X</button></td>
                    <td><a href="/product/details/@p.ProductId" class="btn btn-primary">></a></td>
                </tr>
            }*@
        </tbody>
    </table>
}

@code {
    string filter = "";
    private List<Product> products = new List<Product>();

    protected async override Task OnInitializedAsync()
    {
        filter = state.Filter;

        if (!string.IsNullOrEmpty(filter))
        {
            products = await ps.Search(filter);
        }

        //return base.OnInitializedAsync();
    }

    public async Task onSearch()
    {
        state.Filter = filter;
        products.Clear();
        products = await ps.Search(filter);
    }

    public async Task onDelete(int id)
    {
        await ps.Delete(id);

        await util.Alert("Ready!");

        // Estrategía para refrescar lista
        //products = await ps.Search(filter);

        products.Remove(products.Single(p => p.ProductId == id));
    }
}